<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.1.xsd">
 
	<http auto-config="false" use-expressions="true" access-denied-page="/denied.page"
			entry-point-ref="authenticationEntryPoint" >


		<intercept-url pattern="/login.jsp" access="permitAll"/>
		<intercept-url pattern="/*" access="hasRole('ROLE_USER')"/>

		<logout
				invalidate-session="true"
				logout-success-url="/login.jsp"
				logout-url="/logout"/>

		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
	</http>


 	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
  		p:authenticationManager-ref="customAuthenticationManager"
  		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
  		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />

	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<beans:bean id="customAuthenticationManager" class="com.cinchwallet.adminportal.security.CustomAuthenticationProvider"  />

 	<!-- We just actually need to set the default failure url here -->
 	<beans:bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
 		p:defaultFailureUrl="/login.jsp?error=true" />

 	 <!-- We just actually need to set the default target url here -->
 	<beans:bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
 		p:defaultTargetUrl="/form" />

 	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
 			whenever the server sends back a response requiring authentication -->
 	<!-- See Spring-Security Reference 5.4.1 for more info -->
 	<beans:bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	 	p:loginFormUrl="/login.jsp"/>

	<!-- The tag below has no use but Spring Security needs it to autowire the parent property of
			org.springframework.security.authentication.ProviderManager. Otherwise we get an error
			A probable bug. This is still under investigation-->
	<authentication-manager/>
</beans:beans>